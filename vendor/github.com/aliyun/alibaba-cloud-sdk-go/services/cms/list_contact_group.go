package cms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListContactGroup(request *ListContactGroupRequest) (response *ListContactGroupResponse, err error) {
	response = CreateListContactGroupResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListContactGroupWithChan(request *ListContactGroupRequest) (<-chan *ListContactGroupResponse, <-chan error) {
	responseChan := make(chan *ListContactGroupResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListContactGroup(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListContactGroupWithCallback(request *ListContactGroupRequest, callback func(response *ListContactGroupResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListContactGroupResponse
		var err error
		defer close(result)
		response, err = client.ListContactGroup(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListContactGroupRequest struct {
	*requests.RpcRequest
	PageSize       requests.Integer `position:"Query" name:"PageSize"`
	PageNumber     requests.Integer `position:"Query" name:"PageNumber"`
	CallbyCmsOwner string           `position:"Query" name:"callby_cms_owner"`
}

type ListContactGroupResponse struct {
	*responses.BaseResponse
	Success       bool   `json:"Success" xml:"Success"`
	Code          string `json:"Code" xml:"Code"`
	Message       string `json:"Message" xml:"Message"`
	NextToken     int    `json:"NextToken" xml:"NextToken"`
	Total         int    `json:"Total" xml:"Total"`
	RequestId     string `json:"RequestId" xml:"RequestId"`
	ContactGroups struct {
		ContactGroup []string `json:"ContactGroup" xml:"ContactGroup"`
	} `json:"ContactGroups" xml:"ContactGroups"`
}

func CreateListContactGroupRequest() (request *ListContactGroupRequest) {
	request = &ListContactGroupRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cms", "2017-03-01", "ListContactGroup", "cms", "openAPI")
	return
}

func CreateListContactGroupResponse() (response *ListContactGroupResponse) {
	response = &ListContactGroupResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
