package cms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) PutSystemEvent(request *PutSystemEventRequest) (response *PutSystemEventResponse, err error) {
	response = CreatePutSystemEventResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) PutSystemEventWithChan(request *PutSystemEventRequest) (<-chan *PutSystemEventResponse, <-chan error) {
	responseChan := make(chan *PutSystemEventResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.PutSystemEvent(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) PutSystemEventWithCallback(request *PutSystemEventRequest, callback func(response *PutSystemEventResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *PutSystemEventResponse
		var err error
		defer close(result)
		response, err = client.PutSystemEvent(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type PutSystemEventRequest struct {
	*requests.RpcRequest
	EventInfo string `position:"Query" name:"EventInfo"`
}

type PutSystemEventResponse struct {
	*responses.BaseResponse
	Code    string `json:"Code" xml:"Code"`
	Message string `json:"Message" xml:"Message"`
	Data    string `json:"Data" xml:"Data"`
}

func CreatePutSystemEventRequest() (request *PutSystemEventRequest) {
	request = &PutSystemEventRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cms", "2017-03-01", "PutSystemEvent", "cms", "openAPI")
	return
}

func CreatePutSystemEventResponse() (response *PutSystemEventResponse) {
	response = &PutSystemEventResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
