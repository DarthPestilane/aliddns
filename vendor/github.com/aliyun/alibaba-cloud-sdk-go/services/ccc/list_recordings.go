package ccc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListRecordings(request *ListRecordingsRequest) (response *ListRecordingsResponse, err error) {
	response = CreateListRecordingsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListRecordingsWithChan(request *ListRecordingsRequest) (<-chan *ListRecordingsResponse, <-chan error) {
	responseChan := make(chan *ListRecordingsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListRecordings(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListRecordingsWithCallback(request *ListRecordingsRequest, callback func(response *ListRecordingsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListRecordingsResponse
		var err error
		defer close(result)
		response, err = client.ListRecordings(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListRecordingsRequest struct {
	*requests.RpcRequest
	PageSize    requests.Integer `position:"Query" name:"PageSize"`
	PhoneNumber string           `position:"Query" name:"PhoneNumber"`
	StartTime   requests.Integer `position:"Query" name:"StartTime"`
	Criteria    string           `position:"Query" name:"Criteria"`
	PageNumber  requests.Integer `position:"Query" name:"PageNumber"`
	StopTime    requests.Integer `position:"Query" name:"StopTime"`
	InstanceId  string           `position:"Query" name:"InstanceId"`
	AgentId     string           `position:"Query" name:"AgentId"`
}

type ListRecordingsResponse struct {
	*responses.BaseResponse
	RequestId      string `json:"RequestId" xml:"RequestId"`
	Success        bool   `json:"Success" xml:"Success"`
	Code           string `json:"Code" xml:"Code"`
	Message        string `json:"Message" xml:"Message"`
	HttpStatusCode int    `json:"HttpStatusCode" xml:"HttpStatusCode"`
	Recordings     struct {
		TotalCount int `json:"TotalCount" xml:"TotalCount"`
		PageNumber int `json:"PageNumber" xml:"PageNumber"`
		PageSize   int `json:"PageSize" xml:"PageSize"`
		List       struct {
			Recording []struct {
				ContactId       string `json:"ContactId" xml:"ContactId"`
				ContactType     string `json:"ContactType" xml:"ContactType"`
				AgentId         string `json:"AgentId" xml:"AgentId"`
				AgentName       string `json:"AgentName" xml:"AgentName"`
				CallingNumber   string `json:"CallingNumber" xml:"CallingNumber"`
				CalledNumber    string `json:"CalledNumber" xml:"CalledNumber"`
				StartTime       int    `json:"StartTime" xml:"StartTime"`
				Duration        int    `json:"Duration" xml:"Duration"`
				FileName        string `json:"FileName" xml:"FileName"`
				FilePath        string `json:"FilePath" xml:"FilePath"`
				FileDescription string `json:"FileDescription" xml:"FileDescription"`
				Channel         string `json:"Channel" xml:"Channel"`
				InstanceId      string `json:"InstanceId" xml:"InstanceId"`
			} `json:"Recording" xml:"Recording"`
		} `json:"List" xml:"List"`
	} `json:"Recordings" xml:"Recordings"`
}

func CreateListRecordingsRequest() (request *ListRecordingsRequest) {
	request = &ListRecordingsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("CCC", "2017-07-05", "ListRecordings", "", "")
	return
}

func CreateListRecordingsResponse() (response *ListRecordingsResponse) {
	response = &ListRecordingsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
