package cloudphoto

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListTags(request *ListTagsRequest) (response *ListTagsResponse, err error) {
	response = CreateListTagsResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListTagsWithChan(request *ListTagsRequest) (<-chan *ListTagsResponse, <-chan error) {
	responseChan := make(chan *ListTagsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListTags(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListTagsWithCallback(request *ListTagsRequest, callback func(response *ListTagsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListTagsResponse
		var err error
		defer close(result)
		response, err = client.ListTags(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListTagsRequest struct {
	*requests.RpcRequest
	LibraryId string `position:"Query" name:"LibraryId"`
	StoreName string `position:"Query" name:"StoreName"`
	Lang      string `position:"Query" name:"Lang"`
}

type ListTagsResponse struct {
	*responses.BaseResponse
	Code      string `json:"Code" xml:"Code"`
	Message   string `json:"Message" xml:"Message"`
	RequestId string `json:"RequestId" xml:"RequestId"`
	Action    string `json:"Action" xml:"Action"`
	Tags      []struct {
		Id        int    `json:"Id" xml:"Id"`
		Name      string `json:"Name" xml:"Name"`
		IsSubTag  bool   `json:"IsSubTag" xml:"IsSubTag"`
		ParentTag string `json:"ParentTag" xml:"ParentTag"`
		Cover     struct {
			Id      int    `json:"Id" xml:"Id"`
			Title   string `json:"Title" xml:"Title"`
			FileId  string `json:"FileId" xml:"FileId"`
			State   string `json:"State" xml:"State"`
			Md5     string `json:"Md5" xml:"Md5"`
			IsVideo bool   `json:"IsVideo" xml:"IsVideo"`
			Remark  string `json:"Remark" xml:"Remark"`
			Width   int    `json:"Width" xml:"Width"`
			Height  int    `json:"Height" xml:"Height"`
			Ctime   int    `json:"Ctime" xml:"Ctime"`
			Mtime   int    `json:"Mtime" xml:"Mtime"`
		} `json:"Cover" xml:"Cover"`
	} `json:"Tags" xml:"Tags"`
}

func CreateListTagsRequest() (request *ListTagsRequest) {
	request = &ListTagsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("CloudPhoto", "2017-07-11", "ListTags", "cloudphoto", "openAPI")
	return
}

func CreateListTagsResponse() (response *ListTagsResponse) {
	response = &ListTagsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
