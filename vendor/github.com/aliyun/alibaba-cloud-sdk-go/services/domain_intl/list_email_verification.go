package domain_intl

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ListEmailVerification(request *ListEmailVerificationRequest) (response *ListEmailVerificationResponse, err error) {
	response = CreateListEmailVerificationResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ListEmailVerificationWithChan(request *ListEmailVerificationRequest) (<-chan *ListEmailVerificationResponse, <-chan error) {
	responseChan := make(chan *ListEmailVerificationResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListEmailVerification(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ListEmailVerificationWithCallback(request *ListEmailVerificationRequest, callback func(response *ListEmailVerificationResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListEmailVerificationResponse
		var err error
		defer close(result)
		response, err = client.ListEmailVerification(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ListEmailVerificationRequest struct {
	*requests.RpcRequest
	PageSize           requests.Integer `position:"Query" name:"PageSize"`
	VerificationStatus requests.Integer `position:"Query" name:"VerificationStatus"`
	BeginCreateTime    requests.Integer `position:"Query" name:"BeginCreateTime"`
	Email              string           `position:"Query" name:"Email"`
	PageNum            requests.Integer `position:"Query" name:"PageNum"`
	EndCreateTime      requests.Integer `position:"Query" name:"EndCreateTime"`
	Lang               string           `position:"Query" name:"Lang"`
}

type ListEmailVerificationResponse struct {
	*responses.BaseResponse
	RequestId      string `json:"RequestId" xml:"RequestId"`
	TotalItemNum   int    `json:"TotalItemNum" xml:"TotalItemNum"`
	CurrentPageNum int    `json:"CurrentPageNum" xml:"CurrentPageNum"`
	TotalPageNum   int    `json:"TotalPageNum" xml:"TotalPageNum"`
	PageSize       int    `json:"PageSize" xml:"PageSize"`
	PrePage        bool   `json:"PrePage" xml:"PrePage"`
	NextPage       bool   `json:"NextPage" xml:"NextPage"`
	Data           []struct {
		GmtCreate           string `json:"GmtCreate" xml:"GmtCreate"`
		GmtModified         string `json:"GmtModified" xml:"GmtModified"`
		Email               string `json:"Email" xml:"Email"`
		UserId              string `json:"UserId" xml:"UserId"`
		EmailVerificationNo string `json:"EmailVerificationNo" xml:"EmailVerificationNo"`
		TokenSendTime       string `json:"TokenSendTime" xml:"TokenSendTime"`
		VerificationStatus  int    `json:"VerificationStatus" xml:"VerificationStatus"`
		VerificationTime    string `json:"VerificationTime" xml:"VerificationTime"`
		SendIp              string `json:"SendIp" xml:"SendIp"`
		ConfirmIp           string `json:"ConfirmIp" xml:"ConfirmIp"`
	} `json:"Data" xml:"Data"`
}

func CreateListEmailVerificationRequest() (request *ListEmailVerificationRequest) {
	request = &ListEmailVerificationRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Domain-intl", "2017-12-18", "ListEmailVerification", "", "")
	return
}

func CreateListEmailVerificationResponse() (response *ListEmailVerificationResponse) {
	response = &ListEmailVerificationResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
